version: "3.8"
services:
  traefik:
    image: traefik:v3.0
    command: 
      - "--log.level=TRACE"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    restart: unless-stopped
    ports:
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"

  whoami:
    image: "traefik/whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Path(`/whoami`)"
      - "traefik.http.routers.whoami.entrypoints=web"

  dozzle:
    image: amir20/dozzle:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dozzle/users.yml:/data/users.yml
    environment:
      DOZZLE_AUTH_PROVIDER: simple
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dozzle.rule=Path(`/dozzle`)"
      - "traefik.http.routers.dozzle.entrypoints=web"

  config:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./providers.dev.json:/usr/share/nginx/html/providers
    labels:
      - "traefik.http.middlewares.config-redirect.replacepathregex.regex=/v1/providers"
      - "traefik.http.middlewares.config-redirect.replacepathregex.replacement=/v1/config/providers"
      - "traefik.http.middlewares.config-cors.headers.accesscontrolallowmethods=GET"
      - "traefik.http.middlewares.config-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.config-strip.stripprefixregex.regex=^\\/[^\\/]+\\/[^\\/]+"
      - "traefik.http.middlewares.config-content-type.headers.customresponseheaders.Content-Type=application/json"
      - "traefik.enable=true"
      - "traefik.http.routers.config.rule=PathPrefix(`/v1/config`) || Path(`/v1/providers`)"
      - "traefik.http.routers.config.entrypoints=web"
      - "traefik.http.routers.config.middlewares=config-redirect,config-cors,config-strip,config-content-type"
  
  influxer:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/influxer/Dockerfile
    environment:
      LOG_LEVEL: debug
      SERVER_URL: "https://config:9000"
      INFLUXDB_TOKEN: lj3YEMcRfKvtxM6mAkfdk8fkR5wgPt5ZB0KBhOtPOGDE0ZE_1V8jrv8LPMU1PMj_CjqHM-9QnnYb0j52s7iTeA==

  cctv:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/cctv/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
      CCTV_MODEL_PATH: /opt/wheretopark/model.onnx
      GIN_MODE: debug
    volumes:
      - $HOME/.local/share/wheretopark:/opt/wheretopark
      - $HOME/.cache/wheretopark:/root/.cache/wheretopark
    labels:
      - "traefik.http.middlewares.cctv-cors.headers.accesscontrolallowmethods=GET"
      - "traefik.http.middlewares.cctv-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.cctv-strip.stripprefix.prefixes=/v1/provider/cctv"
      - "traefik.enable=true"
      - "traefik.http.routers.cctv.rule=PathPrefix(`/v1/provider/cctv`)"
      - "traefik.http.routers.cctv.entrypoints=web"
      - "traefik.http.routers.cctv.middlewares=cctv-cors,cctv-strip"

  gdynia:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/gdynia/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
    labels:
      - "traefik.http.middlewares.gdynia-cors.headers.accesscontrolallowmethods=GET"
      - "traefik.http.middlewares.gdynia-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.gdynia-strip.stripprefix.prefixes=/v1/provider/gdynia"
      - "traefik.enable=true"
      - "traefik.http.routers.gdynia.rule=PathPrefix(`/v1/provider/gdynia`)"
      - "traefik.http.routers.gdynia.entrypoints=web"
      - "traefik.http.routers.gdynia.middlewares=gdynia-cors,gdynia-strip"

  glasgow:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/glasgow/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
    labels:
      - "traefik.http.middlewares.glasgow-cors.headers.accesscontrolallowmethods=GET"
      - "traefik.http.middlewares.glasgow-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.glasgow-strip.stripprefix.prefixes=/v1/provider/glasgow"
      - "traefik.enable=true"
      - "traefik.http.routers.glasgow.rule=PathPrefix(`/v1/provider/glasgow`)"
      - "traefik.http.routers.glasgow.entrypoints=web"
      - "traefik.http.routers.glasgow.middlewares=glasgow-cors,glasgow-strip"

  lacity:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/lacity/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
    labels:
      - "traefik.http.middlewares.lacity-cors.headers.accesscontrolallowmethods=GET"
      - "traefik.http.middlewares.lacity-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.lacity-strip.stripprefix.prefixes=/v1/provider/lacity"
      - "traefik.enable=true"
      - "traefik.http.routers.lacity.rule=PathPrefix(`/v1/provider/lacity`)"
      - "traefik.http.routers.lacity.entrypoints=web"
      - "traefik.http.routers.lacity.middlewares=lacity-cors,lacity-strip"

  poznan:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/poznan/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
    labels:
      - "traefik.http.middlewares.poznan-cors.headers.accesscontrolallowmethods=GET"
      - "traefik.http.middlewares.poznan-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.poznan-strip.stripprefix.prefixes=/v1/provider/poznan"
      - "traefik.enable=true"
      - "traefik.http.routers.poznan.rule=PathPrefix(`/v1/provider/poznan`)"
      - "traefik.http.routers.poznan.entrypoints=web"
      - "traefik.http.routers.poznan.middlewares=poznan-cors,poznan-strip"

  warsaw:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/warsaw/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
    labels:
      - "traefik.http.middlewares.warsaw-cors.headers.accesscontrolallowmethods=GET"
      - "traefik.http.middlewares.warsaw-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.warsaw-strip.stripprefix.prefixes=/v1/provider/warsaw"
      - "traefik.enable=true"
      - "traefik.http.routers.warsaw.rule=PathPrefix(`/v1/provider/warsaw`)"
      - "traefik.http.routers.warsaw.entrypoints=web"
      - "traefik.http.routers.warsaw.middlewares=warsaw-cors,warsaw-strip"

  krakow:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/krakow/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
    labels:
      - "traefik.http.middlewares.krakow-cors.headers.accesscontrolallowmethods=GET"
      - "traefik.http.middlewares.krakow-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.krakow-strip.stripprefix.prefixes=/v1/provider/krakow"
      - "traefik.enable=true"
      - "traefik.http.services.krakow.loadbalancer.server.port=8080"
      - "traefik.http.routers.krakow.rule=PathPrefix(`/v1/provider/krakow`)"
      - "traefik.http.routers.krakow.entrypoints=web"
      - "traefik.http.routers.krakow.middlewares=krakow-cors,krakow-strip"

  pycaster:
    restart: unless-stopped
    build: ./pycaster
    environment:
      PYCASTER_DATA: /opt/wheretopark/pycaster
    volumes:
      - $HOME/.local/share/wheretopark/pycaster:/opt/wheretopark/pycaster
  
  forecaster:
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/forecaster/Dockerfile
    depends_on:
      - pycaster
    environment:
      PORT: 8080
      LOG_LEVEL: debug
      FORECASTER_DATA: /opt/wheretopark/forecaster
      FORECASTER_CACHE: /var/cache/wheretopark/forecaster
      PYCASTER_URL: "http://pycaster:8080"
    volumes:
      - $HOME/.local/share/wheretopark/forecaster:/opt/wheretopark/forecaster
      - $HOME/.cache/wheretopark/forecaster:/var/cache/wheretopark/forecaster
    labels:
      - "traefik.http.middlewares.forecaster-cors.headers.accesscontrolallowmethods=GET"
      - "traefik.http.middlewares.forecaster-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.forecaster-strip.stripprefix.prefixes=/v1/forecaster"
      - "traefik.enable=true"
      - "traefik.http.services.forecaster.loadbalancer.server.port=8080"
      - "traefik.http.routers.forecaster.rule=PathPrefix(`/v1/forecaster`)"
      - "traefik.http.routers.forecaster.entrypoints=web"
      - "traefik.http.routers.forecaster.middlewares=forecaster-cors,forecaster-strip"
