version: "3.8"
services:
  traefik:
    container_name: traefik
    image: traefik:v3.0
    command: 
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=contact@wheretopark.app"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - "$HOME/.local/share/wheretopark/letsencrypt:/letsencrypt"

    labels:
      - "traefik.http.middlewares.strip1.stripprefixregex.regex=^\\/[^\\/]+"
      - "traefik.http.middlewares.strip2.stripprefixregex.regex=^\\/[^\\/]+\\/[^\\/]+"
      - "traefik.http.middlewares.strip3.stripprefixregex.regex=^\\/[^\\/]+\\/[^\\/]+\\/[^\\/]+"
      - "traefik.http.middlewares.allowCORS.headers.accesscontrolallowmethods=GET"
      - "traefik.http.middlewares.allowCORS.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.allowCORS.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.allowCORS.headers.accesscontrolmaxage=600"

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dozzle/users.yml:/data/users.yml
    environment:
      DOZZLE_AUTH_PROVIDER: simple

  config:
    container_name: wheretopark_config
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./providers.dev.json:/usr/share/nginx/html/providers
    ports:
      - "9000:80"
    labels:
      - "traefik.http.middlewares.content-type-json.headers.customresponseheaders.Content-Type=application/json"
      - "traefik.http.middlewares.redirect-new-config.replacepathregex.regex=/v1/providers"
      - "traefik.http.middlewares.redirect-new-config.replacepathregex.replacement=/v1/config/providers"
      - "traefik.http.routers.config.rule=PathPrefix(`/v1/config`) || Path(`/v1/providers`)"
      - "traefik.http.routers.config.middlewares=redirect-new-config,strip2,content-type-json,allowCORS"

  
  cctv:
    container_name: wheretopark_cctv
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/cctv/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
      CCTV_MODEL_PATH: /opt/wheretopark/model.onnx
      GIN_MODE: release
    volumes:
      - $HOME/.local/share/wheretopark:/opt/wheretopark
      - $HOME/.cache/wheretopark:/root/.cache/wheretopark
    ports:
      - "9001:8080"
    labels:
      - "traefik.http.routers.cctv.rule=PathPrefix(`/v1/provider/cctv`)"
      - "traefik.http.routers.cctv.middlewares=strip3,allowCORS"


  gdansk:
    container_name: wheretopark_gdansk
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/gdansk/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
    ports:
      - "9002:8080"
    labels:
      - "traefik.http.routers.gdansk.rule=PathPrefix(`/v1/provider/gdansk`)"
      - "traefik.http.routers.gdansk.middlewares=strip3,allowCORS"

  gdynia:
    container_name: wheretopark_gdynia
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/gdynia/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
    ports:
      - "9003:8080"
    labels:
      - "traefik.http.routers.gdynia.rule=PathPrefix(`/v1/provider/gdynia`)"
      - "traefik.http.routers.gdynia.middlewares=strip3,allowCORS"

  glasgow:
    container_name: wheretopark_glasgow
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/glasgow/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
    ports:
      - "9004:8080"
    labels:
      - "traefik.http.routers.glasgow.rule=PathPrefix(`/v1/provider/glasgow`)"
      - "traefik.http.routers.glasgow.middlewares=strip3,allowCORS"

  lacity:
    container_name: wheretopark_lacity
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/lacity/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
    ports:
      - "9005:8080"
    labels:
      - "traefik.http.routers.lacity.rule=PathPrefix(`/v1/provider/lacity`)"
      - "traefik.http.routers.lacity.middlewares=strip3,allowCORS"

  poznan:
    container_name: wheretopark_poznan
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/poznan/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
    ports:
      - "9006:8080"
    labels:
      - "traefik.http.routers.poznan.rule=PathPrefix(`/v1/provider/poznan`)"
      - "traefik.http.routers.poznan.middlewares=strip3,allowCORS"


  warsaw:
    container_name: wheretopark_warsaw
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./cmd/warsaw/Dockerfile
    environment:
      PORT: 8080
      LOG_LEVEL: debug
    ports:
      - "9007:8080"
    labels:
      - "traefik.http.routers.warsaw.rule=PathPrefix(`/v1/provider/warsaw`)"
      - "traefik.http.routers.warsaw.middlewares=strip3,allowCORS"
        