version: "3.8"
services:
  authorization:
    image: ghcr.io/wheretopark/authorization:latest
    environment:
      PORT: 80
      GIN_MODE: release
      JWT_SECRET: ${JWT_SECRET?JWT_SECRET not set}
      APPLICATION_CLIENT_ID: ${APPLICATION_CLIENT_ID?APPLICATION_CLIENT_ID not set}
      APPLICATION_CLIENT_SECRET: ${APPLICATION_CLIENT_SECRET?APPLICATION_CLIENT_SECRET not set}
      PROVIDER_CLIENT_ID: ${PROVIDER_CLIENT_ID?PROVIDER_CLIENT_ID not set}
      PROVIDER_CLIENT_SECRET: ${PROVIDER_CLIENT_SECRET?PROVIDER_CLIENT_SECRET not set}
    networks:
      - net
      - traefik-public
    healthcheck:
      test: curl --fail http://localhost/health-check || exit 1
      interval: 5s
      timeout: 10s
      retries: 10
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.wheretopark-authorization-http.rule=Host(`${AUTHORIZATION_DOMAIN?AUTHORIZATION_DOMAIN not set}`)
        - traefik.http.routers.wheretopark-authorization-http.entrypoints=http
        - traefik.http.routers.wheretopark-authorization-http.middlewares=https-redirect
        - traefik.http.routers.wheretopark-authorization-https.rule=Host(`${AUTHORIZATION_DOMAIN?AUTHORIZATION_DOMAIN not set}`)
        - traefik.http.routers.wheretopark-authorization-https.entrypoints=https
        - traefik.http.routers.wheretopark-authorization-https.tls=true
        - traefik.http.routers.wheretopark-authorization-https.tls.certresolver=le
        - traefik.http.services.wheretopark-authorization.loadbalancer.server.port=80

  storekeeper:
    image: ghcr.io/wheretopark/storekeeper:latest
    environment:
      PORT: 80
      STORE_URI: redis://redis
      JWT_SECRET: ${JWT_SECRET?JWT_SECRET not set}
    networks:
      - net
      - traefik-public
    depends_on:
      - redis
    healthcheck:
      test: curl --fail http://localhost/health-check || exit 1
      interval: 5s
      timeout: 10s
      retries: 10
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.wheretopark-storekeeper-http.rule=Host(`${STOREKEEPER_DOMAIN?STOREKEEPER_DOMAIN not set}`)
        - traefik.http.routers.wheretopark-storekeeper-http.entrypoints=http
        - traefik.http.routers.wheretopark-storekeeper-http.middlewares=https-redirect
        - traefik.http.routers.wheretopark-storekeeper-https.rule=Host(`${STOREKEEPER_DOMAIN?STOREKEEPER_DOMAIN not set}`)
        - traefik.http.routers.wheretopark-storekeeper-https.entrypoints=https
        - traefik.http.routers.wheretopark-storekeeper-https.tls=true
        - traefik.http.routers.wheretopark-storekeeper-https.tls.certresolver=le
        - traefik.http.services.wheretopark-storekeeper.loadbalancer.server.port=80

  providers-tristar:
    image: ghcr.io/wheretopark/providers-tristar:latest
    networks:
      - net
    environment:
      STOREKEEPER_URL: http://storekeeper
      AUTHORIZATION_URL: http://authorization
      CLIENT_ID: ${PROVIDER_CLIENT_ID?PROVIDER_CLIENT_ID not set}
      CLIENT_SECRET: ${PROVIDER_CLIENT_SECRET?PROVIDER_CLIENT_SECRET not set}
    depends_on:
      - storekeeper
      - authorization

  redis:
    image: redis
    networks:
      - net

networks:
  net:
    driver: overlay
    attachable: true
  traefik-public:
    external: true